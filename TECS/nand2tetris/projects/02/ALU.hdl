// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:    
    
    

    Mux16(a=x, b[0..15]=false, sel=zx, out=x1);
    Not16(in=x1, out=notx);
    Mux16(a=x1, b=notx, sel=nx, out=x2);
    Mux16(a=y, b[0..15]=false, sel=zy, out=y1);
    Not16(in=y1, out=noty);
    Mux16(a=y1, b=noty, sel=ny, out=y2);

    Add16(a=x2, b=y2, out=xyadd);
    And16(a=x2, b=y2, out=xandy);

    Mux16(a=xandy, b=xyadd, sel=f, out=out1);
    Not16(in=out1, out=notout1);

    Mux16(a=out1, b=notout1, sel=no, out=out, out[0..7]=left, out[8..15]=right, out[15]=ng);
    Or8Way(in=left, out=w1);
    Or8Way(in=right, out=w2);
    Or(a=w1, b=w2, out=notzr);
    Not(in=notzr, out=zr);

    // Not16(in=x, out=notx);
    // Not16(in=y, out=noty);
    
    // And16(a=x, b=notx, out=zerox);
    // And16(a=y, b=noty, out=zeroy);
    
    // Mux16(a=x, b=notx, sel=nx, out=x1);
    // Mux16(a=x1, b=zerox, sel=zx, out=x2);
    // Mux16(a=y, b=noty, sel=ny, out=y1);
    // Mux16(a=y1, b=zeroy, sel=zy, out=y2);

    // And16(a=x2, b=y2, out=w1);
    // Add16(a=x2, b=y2, out=w2);

    // Mux16(a=w1, b=w2, sel=f, out=w3);
    // Not16(in=w3, out=notw3);
    // Mux16(a=w3, b=notw3, sel=no, out[0..7]=left, out[8..15]=right, out=out, out[0]=first);
    
    // Or8Way(in=left, out=ww1);
    // Or8Way(in=right, out=ww2);


    // Or(a=ww1, b=ww2, out=zeroout);
    // Mux(a=true, b=false, sel=zeroout, out=zr);

    // Xor(a=first, b=false, out=negative);
    // Mux(a=false, b=true, sel=negative, out=ng);


}